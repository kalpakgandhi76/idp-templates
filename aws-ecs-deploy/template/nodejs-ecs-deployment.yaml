apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: nodejsdeployonecs
  title: Create a NodeJs application and deploy it to AWS ECS
  description: Create a NodeJs application, Provision the Infrastructure and deploy it to AWS ECS
  tags: [ 'recommended', 'aws', 'ecs', 'nodejs', 'dotnet' ]
spec:
  owner: github.com/vam-sre-team
  type: service
  parameters:
  - title: Provide Component Details
    required:
    - name
    properties:
      name:
        title: Name
        type: string
        description: Unique name of the AnyCompany catalog component
        ui:autofocus: true
        ui:options:
          rows: 5
      description:
        title: A short description of the module - put full details in the README!
        type: string
      owner:
        title: Owner
        type: string
        description: Owner of the component
        ui:field: OwnerPicker
        ui:options:
          allowedKinds:
          - Group
  - title: ECS Deployment Configuration
    required:
    - region
    - ecrrepositoryname
    - ecsclustername
    - ecsservicename
    - infraprovision
    - ecsdeployment
    properties:
      region:
        title: Region
        type: string
        description: region to deploy (e.g., us-east-1)
      ecrrepositoryname:
        title: Container Registry Name
        type: string
        description: Container registry name to store the application image
      ecsclustername:
        title: ECS Cluster Name
        type: string
        description: ECS cluster name to deploy application
      ecsservicename:
        title: ECS Service Name
        type: string
        description: ECS service name to deploy application
      infraprovision:
        title: Infrastructure provision ?
        type: boolean
        default: false
      ecsdeployment:
        title: ECS deployment ?
        type: boolean
        default: false
  - title: Choose a Repository Location
    required:
    - repoUrl
    properties:
      repoUrl:
        title: Location of the repository
        type: string
        ui:field: RepoUrlPicker
        ui:options:
          allowedHosts:
          - github.com

  steps:
  # Fetching the template details
  - id: fetch-base
    name: Fetching Details from Content Folder
    action: fetch:template
    input:
      # url: ./content
      url: https://github.com/kalpakgandhi76/skeleton-ecs-tf-nodejs/tree/main/
      values:
        name: ${{ parameters.name }}
        owner: ${{ parameters.owner }}
        description: ${{ parameters.description }}
        repo_name: ${{ (parameters.repoUrl | parseRepoUrl)["repo"] }}
        repo_owner: ${{ (parameters.repoUrl | parseRepoUrl)["owner"] }}
        region: ${{ parameters.region }}
        ecrrepositoryname: ${{ parameters.ecrrepositoryname }}
        ecsclustername: ${{ parameters.ecsclustername }}
        ecsservicename: ${{ parameters.ecsservicename }}
        infraprovision: ${{ parameters.infraprovision }}
        ecsdeployment: ${{ parameters.ecsdeployment }}
  # Publish the content to GitHub
  - id: publish-temp
    name: Publishing Details to main branch
    action: publish:github
    input:
      allowedHosts: [ 'github.com' ]
      description: This repo is to create a ECS ${{ parameters.ecsclustername }} using AnyCompany IDP.
      repoUrl: ${{ parameters.repoUrl }} # Ensure this repo already exists
      repoVisibility: public
      defaultBranch: main # Ensure default branch is set to 'main'
      branch: dev # Target branch to commit the changes
      skipGitValidation: true # Skip GitHub validations like branch protections
      requireCodeOwnerReviews: false
      permissions:
        actions: write
        contents: write
      collaborators:
      - user: "kalpakgandhi76" # Replace with the GitHub username of the collaborator
        access: Admin

  - id: kube-pr
    name: "Open PR in GitOps Repository"
    action: publish:github:pull-request
    input:
      repoUrl: ${{ parameters.repoUrl }}
      branchName: dev
      title: Create a pull request from dev to main
      description: |
        This repo is to create a ECS. ${{ steps.changed-files.outputs.fileList }}
      targetBranch: main
      reviewers:
      - "kalpakgandhi76" # Replace with the GitHub username of the reviewer
      autoApprove: true # Automatically approve the PR

  # Triggering GitHub Actions to create application resources
  - id: github-action
    name: Starting GitHub Action
    action: github:actions:dispatch
    input:
      workflowId: main_template.yml
      repoUrl: ${{ parameters.repoUrl }}
      branchOrTagName: 'main'
      workflowInputs:
        region: ${{ parameters.region }}
        ecrrepositoryname: ${{ parameters.ecrrepositoryname }}
        ecsclustername: ${{ parameters.ecsclustername }}
        ecsservicename: ${{ parameters.ecsservicename }}
        infraprovision: ${{ parameters.infraprovision }}
        ecsdeployment: ${{ parameters.ecsdeployment }}

  # Registering the new component in Backstage catalog
  - id: register
    name: Registering the new Component
    action: catalog:register
    input:
      repoContentsUrl: ${{steps['publish-temp'].output.repoContentsUrl }}
      catalogInfoPath: '/catalog-info.yaml'
  # Output links are displayed to the user after the template execution
  output:
    links:
    - title: Repository
      url: ${{ steps['publish-temp'].output.remoteUrl }}
    - title: Open in catalog
      icon: catalog
      entityRef: ${{ steps['register'].output.entityRef }}
